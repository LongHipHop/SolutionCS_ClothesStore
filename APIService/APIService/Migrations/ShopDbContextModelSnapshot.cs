// <auto-generated />
using System;
using APIService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIService.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    partial class ShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIService.Models.Accounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("CreateAt")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TokenVersion")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vinh Long",
                            BirthDay = new DateOnly(2025, 10, 1),
                            CreateAt = new DateOnly(2025, 11, 1),
                            Email = "truongtranlong23@gmail.com",
                            Fullname = "Truong Tran Long",
                            Gender = "Male",
                            Password = "$2a$12$cVw6vAlKHuxIFsz32ElSnOmMjjoeFpyIbRHZOfrim7nAgz0UbImI6",
                            Phone = "0868984121",
                            RoleId = 1,
                            Status = "Active",
                            TokenVersion = 0,
                            UpdateAt = new DateOnly(2025, 11, 1)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Vinh Long",
                            BirthDay = new DateOnly(2025, 10, 1),
                            CreateAt = new DateOnly(2025, 11, 1),
                            Email = "longttce171365@fpt.edu.vn",
                            Fullname = "Tran Thi B",
                            Gender = "Male",
                            Password = "$2a$12$cVw6vAlKHuxIFsz32ElSnOmMjjoeFpyIbRHZOfrim7nAgz0UbImI6",
                            Phone = "0868984122",
                            RoleId = 4,
                            Status = "Active",
                            TokenVersion = 0,
                            UpdateAt = new DateOnly(2025, 11, 1)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Vinh Long",
                            BirthDay = new DateOnly(2025, 10, 1),
                            CreateAt = new DateOnly(2025, 11, 1),
                            Email = "customer@shop.com",
                            Fullname = "Phạm Văn C",
                            Gender = "Male",
                            Password = "$2a$12$cVw6vAlKHuxIFsz32ElSnOmMjjoeFpyIbRHZOfrim7nAgz0UbImI6",
                            Phone = "0868984123",
                            RoleId = 5,
                            Status = "Active",
                            TokenVersion = 0,
                            UpdateAt = new DateOnly(2025, 11, 1)
                        });
                });

            modelBuilder.Entity("APIService.Models.CartItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductVariantId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            ProductVariantId = 3,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("APIService.Models.Carts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 3,
                            CreatedAt = new DateTime(2025, 11, 1, 1, 10, 37, 897, DateTimeKind.Local).AddTicks(5514)
                        });
                });

            modelBuilder.Entity("APIService.Models.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Shirt"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Pants"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Dress"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Accressory"
                        });
                });

            modelBuilder.Entity("APIService.Models.Colors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorName = "White"
                        },
                        new
                        {
                            Id = 2,
                            ColorName = "Black"
                        },
                        new
                        {
                            Id = 3,
                            ColorName = "Red"
                        },
                        new
                        {
                            Id = 4,
                            ColorName = "Blue"
                        });
                });

            modelBuilder.Entity("APIService.Models.EmailVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EmailVerification");
                });

            modelBuilder.Entity("APIService.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantsId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductVariantsId = 1,
                            Quantity = 2,
                            UnitPrice = 250000m
                        });
                });

            modelBuilder.Entity("APIService.Models.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("Decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 3,
                            Note = "First order",
                            OrderDate = new DateTime(2025, 11, 1, 1, 10, 37, 897, DateTimeKind.Local).AddTicks(5593),
                            PaymentMethod = "COD",
                            ShippingAddress = "123 Main St",
                            Status = "Pending",
                            TotalPrice = 500000m
                        });
                });

            modelBuilder.Entity("APIService.Models.PasswordResets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("APIService.Models.Payments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500000m,
                            OrderId = 1,
                            PaymentDate = new DateTime(2025, 11, 1, 1, 10, 37, 897, DateTimeKind.Local).AddTicks(5534),
                            PaymentMethod = "COD",
                            PaymentStatus = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 500000m,
                            OrderId = 1,
                            PaymentDate = new DateTime(2025, 11, 1, 1, 10, 37, 897, DateTimeKind.Local).AddTicks(5535),
                            PaymentMethod = "Bank Transfer",
                            PaymentStatus = "Completed"
                        });
                });

            modelBuilder.Entity("APIService.Models.ProductPromotions", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            PromotionId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            PromotionId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            PromotionId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            PromotionId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            PromotionId = 2
                        });
                });

            modelBuilder.Entity("APIService.Models.ProductVariants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            Price = 250000m,
                            ProductId = 1,
                            SizeId = 2,
                            Stock = 30
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 4,
                            Price = 400000m,
                            ProductId = 2,
                            SizeId = 3,
                            Stock = 25
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 3,
                            Price = 320000m,
                            ProductId = 3,
                            SizeId = 2,
                            Stock = 15
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 2,
                            Price = 180000m,
                            ProductId = 4,
                            SizeId = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 5,
                            ColorId = 2,
                            Price = 750000m,
                            ProductId = 5,
                            SizeId = 4,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("APIService.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Áo sơ mi trắng tay dài",
                            Discount = 0.0,
                            Image = "product-02.jpg",
                            Price = 250000m,
                            ProductName = "White Shirt",
                            StockQuantity = 10,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quần jean nam ống đứng",
                            Discount = 0.0,
                            Image = "product-07.jpg",
                            Price = 400000m,
                            ProductName = "Blue Jeans",
                            StockQuantity = 50,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Váy hoa vintage",
                            Discount = 0.0,
                            Image = "product-05.jpg",
                            Price = 320000m,
                            ProductName = "Summer Dress",
                            StockQuantity = 32,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Áo thun cotton",
                            Discount = 0.0,
                            Image = "product-14.jpg",
                            Price = 180000m,
                            ProductName = "Black T-Shirt",
                            StockQuantity = 54,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Áo khoác da cao cấp",
                            Discount = 0.0,
                            Image = "product-04.jpg",
                            Price = 750000m,
                            ProductName = "Leather Jacket",
                            StockQuantity = 11,
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("APIService.Models.Promotions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SALE10",
                            DiscountPercent = 10,
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = "Active",
                            StartDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Code = "SALE20",
                            DiscountPercent = 20,
                            EndDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = "Active",
                            StartDate = new DateTime(2025, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("APIService.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountsId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("APIService.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "CONSULTING_STAFF"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "SALE_STAFF"
                        },
                        new
                        {
                            Id = 5,
                            RoleName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("APIService.Models.Shipments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("OrdersId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("APIService.Models.Sizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SizeName = "S"
                        },
                        new
                        {
                            Id = 2,
                            SizeName = "M"
                        },
                        new
                        {
                            Id = 3,
                            SizeName = "L"
                        },
                        new
                        {
                            Id = 4,
                            SizeName = "XL"
                        });
                });

            modelBuilder.Entity("APIService.Models.Accounts", b =>
                {
                    b.HasOne("APIService.Models.Roles", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APIService.Models.CartItems", b =>
                {
                    b.HasOne("APIService.Models.Carts", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIService.Models.ProductVariants", "ProductVariant")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("APIService.Models.Carts", b =>
                {
                    b.HasOne("APIService.Models.Accounts", "Account")
                        .WithMany("Carts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APIService.Models.OrderDetails", b =>
                {
                    b.HasOne("APIService.Models.Orders", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIService.Models.ProductVariants", "ProductVariants")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("APIService.Models.Orders", b =>
                {
                    b.HasOne("APIService.Models.Accounts", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APIService.Models.Payments", b =>
                {
                    b.HasOne("APIService.Models.Orders", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("APIService.Models.ProductPromotions", b =>
                {
                    b.HasOne("APIService.Models.Products", "Products")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIService.Models.Promotions", "Promotions")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("APIService.Models.ProductVariants", b =>
                {
                    b.HasOne("APIService.Models.Colors", "Color")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIService.Models.Products", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIService.Models.Sizes", "Size")
                        .WithMany("ProductVariants")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("APIService.Models.Products", b =>
                {
                    b.HasOne("APIService.Models.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("APIService.Models.Reviews", b =>
                {
                    b.HasOne("APIService.Models.Accounts", "Accounts")
                        .WithMany("Reviews")
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIService.Models.Products", "Products")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("APIService.Models.Shipments", b =>
                {
                    b.HasOne("APIService.Models.Orders", "Orders")
                        .WithMany("Shipments")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("APIService.Models.Accounts", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("APIService.Models.Carts", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("APIService.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APIService.Models.Colors", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("APIService.Models.Orders", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("APIService.Models.ProductVariants", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("APIService.Models.Products", b =>
                {
                    b.Navigation("ProductPromotions");

                    b.Navigation("ProductVariants");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("APIService.Models.Promotions", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("APIService.Models.Roles", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("APIService.Models.Sizes", b =>
                {
                    b.Navigation("ProductVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
